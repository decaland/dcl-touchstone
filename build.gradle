plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'idea'
}

group = 'com.github.decaland.touchstone'

ext {
    publishToSerpnet = project.hasProperty('serpnet')
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

wrapper {
    gradleVersion = "${project.property('dcl.minversion.gradle')}"
    distributionType = Wrapper.DistributionType.ALL
}

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter:${property('dcl.version.junit5')}")

    implementation "org.springframework.boot:spring-boot-gradle-plugin:${property('dcl.version.spring-boot')}"
    implementation "io.spring.gradle:dependency-management-plugin:${property('dcl.version.spring-dependency-management')}"
    implementation "org.jetbrains.kotlin:kotlin-gradle-plugin:${property('dcl.version.kotlin')}"
    implementation "org.jetbrains.kotlin:kotlin-allopen:${property('dcl.version.kotlin')}"

    implementation "io.freefair.gradle:lombok-plugin:${property('dcl.version.lombok')}"
}

test {
    useJUnitPlatform {
        includeEngines('junit-jupiter')
        excludeEngines('junit-vintage')
    }
}

publishing {
    repositories {
        if (publishToSerpnet) {
            maven {
                url = version.endsWith('SNAPSHOT')
                        ? property('dcl.repository.maven.snapshots')
                        : property('dcl.repository.maven.releases')
                credentials {
                    username = property('dcl.repository.maven.username')
                    password = property('dcl.repository.maven.password')
                }
            }
        } else {
            mavenLocal()
        }
    }
}

project.getExtensions().findByType(GradlePluginDevelopmentExtension).plugins { pluginContainer ->
    pluginContainer.create("decalandLibraryJava") { plugin ->
        plugin.id = 'dcl-lib-java'
        plugin.displayName = 'Decaland library written in Java'
        plugin.description = 'Decaland library written in Java'
        plugin.implementationClass = 'com.github.decaland.touchstone.plugins.builds.DecalandLibraryJavaPlugin'
    }
    pluginContainer.create("decalandLibraryJavaKotlin") { plugin ->
        plugin.id = 'dcl-lib-java-kotlin'
        plugin.displayName = 'Decaland library written in Java or Kotlin or both'
        plugin.description = 'Decaland library written in Java or Kotlin or both'
        plugin.implementationClass = 'com.github.decaland.touchstone.plugins.builds.DecalandLibraryJavaKotlinPlugin'
    }
    pluginContainer.create("decalandSpringBootLibraryJava") { plugin ->
        plugin.id = 'dcl-boot-lib-java'
        plugin.displayName = 'Decaland Spring Boot-based library written in Java'
        plugin.description = 'Decaland Spring Boot-based library written in Java'
        plugin.implementationClass = 'com.github.decaland.touchstone.plugins.builds.DecalandSpringBootLibraryJavaPlugin'
    }
    pluginContainer.create("decalandSpringBootLibraryJavaKotlin") { plugin ->
        plugin.id = 'dcl-boot-lib-java-kotlin'
        plugin.displayName = 'Decaland Spring Boot-based library written in Java or Kotlin or both'
        plugin.description = 'Decaland Spring Boot-based library written in Java or Kotlin or both'
        plugin.implementationClass = 'com.github.decaland.touchstone.plugins.builds.DecalandSpringBootLibraryJavaKotlinPlugin'
    }
    pluginContainer.create("decalandSpringBootApplicationJava") { plugin ->
        plugin.id = 'dcl-boot-app-java'
        plugin.displayName = 'Decaland Spring Boot-based application written in Java'
        plugin.description = 'Decaland Spring Boot-based application written in Java'
        plugin.implementationClass = 'com.github.decaland.touchstone.plugins.builds.DecalandSpringBootApplicationJavaPlugin'
    }
    pluginContainer.create("decalandSpringBootApplicationJavaKotlin") { plugin ->
        plugin.id = 'dcl-boot-app-java-kotlin'
        plugin.displayName = 'Decaland Spring Boot-based application written in Java or Kotlin or both'
        plugin.description = 'Decaland Spring Boot-based application written in Java or Kotlin or both'
        plugin.implementationClass = 'com.github.decaland.touchstone.plugins.builds.DecalandSpringBootApplicationJavaKotlinPlugin'
    }
    pluginContainer.create("decalandEssentialDependencies") { plugin ->
        plugin.id = 'dcl-essential-dependencies'
        plugin.displayName = 'Decaland essential library dependencies'
        plugin.description = 'Decaland essential library dependencies'
        plugin.implementationClass = 'com.github.decaland.touchstone.plugins.dependencies.DecalandEssentialDependenciesPlugin'
    }
}

/*
Add another testing module on top of the standard 'test'. Call it 'integration'
and use it to house integration testing.
 */
sourceSets {
    integration {}
}

gradlePlugin.testSourceSets(sourceSets.integration)
configurations.integrationImplementation.extendsFrom(configurations.testImplementation)

tasks.register('integration', Test) {
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
}

tasks.named('check') {
    dependsOn(tasks.integration)
}

idea {
    module {
        testSourceDirs += project.sourceSets.integration.java.srcDirs
        testSourceDirs += project.sourceSets.integration.resources.srcDirs
    }
}
