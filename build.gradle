plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'groovy'
    id 'idea'
}

group = 'com.github.decaland.touchstone'

java {
    withJavadocJar()
    withSourcesJar()
}

ext {
    /*
    Publishing to Serpnet artifactory is achieved by providing `-Pserpnet`
    argument to Gradle.
     */
    publishToSerpnet = project.hasProperty('serpnet')
}

repositories {
    mavenCentral()
    gradlePluginPortal()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
}

// Download the full version of Gradle wrapper
wrapper {
    gradleVersion = "${project.property('dcl.version.gradle')}"
    distributionType = Wrapper.DistributionType.ALL
}

// Extract and store useful objects
def testTask = tasks.named('test')
def gradlePluginDevelopmentExtension = project.getExtensions().findByType(GradlePluginDevelopmentExtension)

// Create and register test-related source sets
def sourceSets = (SourceSetContainer) project.getProperties().get("sourceSets")
def testIntegrationSrc = sourceSets.create('testIntegration')
def testFunctionalSrc = sourceSets.create('testFunctional')

// Link functional tests with Gradle plugin development plugin
gradlePluginDevelopmentExtension.testSourceSets(testFunctionalSrc)

// Create and register test-related tasks
def testIntegrationTask = tasks.register('testIntegration', Test) {
    group = 'verification'
    testClassesDirs = testIntegrationSrc.output.classesDirs
    classpath = testIntegrationSrc.runtimeClasspath
    it.mustRunAfter(testTask)
}
def testFunctionalTask = tasks.register('testFunctional', Test) {
    group = 'verification'
    testClassesDirs = testFunctionalSrc.output.classesDirs
    classpath = testFunctionalSrc.runtimeClasspath
    it.mustRunAfter(testTask)
}

// Link up the additional test-related tasks; make tests mandatory for publishing
tasks.named('check') {
    it.dependsOn(testIntegrationTask, testFunctionalTask)
}
tasks.withType(AbstractPublishToMaven) {
    it.dependsOn(tasks.named('check'))
}

// Set up dependencies for plugin development & testing
dependencies {
    // Third party plugins applied to consumer projects
    implementation "org.springframework.boot:spring-boot-gradle-plugin:${property('dcl.version.spring-boot')}"
    implementation "io.spring.gradle:dependency-management-plugin:${property('dcl.version.spring-dependency-management')}"
    implementation "org.jetbrains.kotlin:kotlin-gradle-plugin:${property('dcl.version.kotlin')}"
    implementation "org.jetbrains.kotlin:kotlin-allopen:${property('dcl.version.kotlin')}"
    implementation "org.jetbrains.kotlin:kotlin-serialization:${property('dcl.version.kotlin')}"
    implementation "org.jetbrains.kotlin:kotlin-noarg:${property('dcl.version.kotlin')}"
    implementation "org.jetbrains.dokka:dokka-gradle-plugin:${property('dcl.version.dokka')}"
    implementation "io.freefair.gradle:lombok-plugin:${property('dcl.version.lombok')}"

    // Unit tests use jUnit5, Mockito, and AssertJ
    testImplementation "org.junit.jupiter:junit-jupiter:${property('dcl.version.junit5')}"
    testImplementation "org.mockito:mockito-junit-jupiter:${property('dcl.version.mockito')}"
    testImplementation "org.assertj:assertj-core:${property('dcl.version.assertj')}"

    // Tests naturally depend on the code in the main project
    testIntegrationImplementation project
    testFunctionalImplementation project

    // Integration/functional tests use Spock
    testIntegrationImplementation platform("org.spockframework:spock-bom:${property('dcl.version.spock-core')}")
    testIntegrationImplementation("org.spockframework:spock-core") {
        exclude group: 'org.codehaus.groovy'
    }

    testFunctionalImplementation platform("org.spockframework:spock-bom:${property('dcl.version.spock-core')}")
    testFunctionalImplementation("org.spockframework:spock-core") {
        exclude group: 'org.codehaus.groovy'
    }
    testFunctionalImplementation "org.spockframework:spock-junit4"
}

// Ensure new test configurations extend from implementation
def implementationConfiguration = configurations.getByName('implementation')
configurations.getByName('testIntegrationImplementation').extendsFrom(implementationConfiguration)
configurations.getByName('testFunctionalImplementation').extendsFrom(implementationConfiguration)

// Configure tests to use JUnit platform
tasks.withType(Test).configureEach {
    useJUnitPlatform()

    // Gradle needs to fail if no tests are found (https://github.com/gradle/gradle/issues/7452)
    afterSuite { desc, result ->
        if (!desc.parent) {
            if (result.testCount == 0) {
                throw new IllegalStateException("Tests not found")
            }
        }
    }
}

// Set up publishing of Touchstone plugins
publishing {
    repositories {
        if (publishToSerpnet) {
            maven {
                url = version.endsWith('SNAPSHOT')
                        ? property('dcl.repository.maven.snapshots')
                        : property('dcl.repository.maven.releases')
                credentials {
                    username = property('dcl.repository.maven.username')
                    password = property('dcl.repository.maven.password')
                }
            }
        } else {
            mavenLocal()
        }
    }
}

// Set up metadata of published Touchstone plugins
gradlePluginDevelopmentExtension.plugins { pluginContainer ->
    pluginContainer.create("decalandLibraryJava") { plugin ->
        plugin.id = 'dcl-lib-java'
        plugin.displayName = 'Decaland library written in Java'
        plugin.description = 'Decaland library written in Java'
        plugin.implementationClass = 'com.github.decaland.touchstone.plugins.builds.DecalandLibraryJavaPlugin'
    }
    pluginContainer.create("decalandLibraryJavaKotlin") { plugin ->
        plugin.id = 'dcl-lib-java-kotlin'
        plugin.displayName = 'Decaland library written in Java or Kotlin or both'
        plugin.description = 'Decaland library written in Java or Kotlin or both'
        plugin.implementationClass = 'com.github.decaland.touchstone.plugins.builds.DecalandLibraryJavaKotlinPlugin'
    }
    pluginContainer.create("decalandSpringBootLibraryJava") { plugin ->
        plugin.id = 'dcl-boot-lib-java'
        plugin.displayName = 'Decaland Spring Boot-based library written in Java'
        plugin.description = 'Decaland Spring Boot-based library written in Java'
        plugin.implementationClass = 'com.github.decaland.touchstone.plugins.builds.DecalandSpringBootLibraryJavaPlugin'
    }
    pluginContainer.create("decalandSpringBootLibraryJavaKotlin") { plugin ->
        plugin.id = 'dcl-boot-lib-java-kotlin'
        plugin.displayName = 'Decaland Spring Boot-based library written in Java or Kotlin or both'
        plugin.description = 'Decaland Spring Boot-based library written in Java or Kotlin or both'
        plugin.implementationClass = 'com.github.decaland.touchstone.plugins.builds.DecalandSpringBootLibraryJavaKotlinPlugin'
    }
    pluginContainer.create("decalandSpringBootApplicationJava") { plugin ->
        plugin.id = 'dcl-boot-app-java'
        plugin.displayName = 'Decaland Spring Boot-based application written in Java'
        plugin.description = 'Decaland Spring Boot-based application written in Java'
        plugin.implementationClass = 'com.github.decaland.touchstone.plugins.builds.DecalandSpringBootApplicationJavaPlugin'
    }
    pluginContainer.create("decalandSpringBootApplicationJavaKotlin") { plugin ->
        plugin.id = 'dcl-boot-app-java-kotlin'
        plugin.displayName = 'Decaland Spring Boot-based application written in Java or Kotlin or both'
        plugin.description = 'Decaland Spring Boot-based application written in Java or Kotlin or both'
        plugin.implementationClass = 'com.github.decaland.touchstone.plugins.builds.DecalandSpringBootApplicationJavaKotlinPlugin'
    }
    pluginContainer.create("decalandUsesJunitFive") { plugin ->
        plugin.id = 'dcl-uses-junit-five'
        plugin.displayName = 'Decaland jUnit5 dependencies'
        plugin.description = 'Decaland jUnit5 dependencies'
        plugin.implementationClass = 'com.github.decaland.touchstone.plugins.dependencies.testing.DecalandUsesJunitFivePlugin'
    }
}

// Configure Intellij IDEA to recognize additional source sets
idea {
    module {
        testSourceDirs += testIntegrationSrc.java.srcDirs
        testSourceDirs += testIntegrationSrc.groovy.srcDirs
        testSourceDirs += testIntegrationSrc.resources.srcDirs
        testSourceDirs += testFunctionalSrc.java.srcDirs
        testSourceDirs += testFunctionalSrc.groovy.srcDirs
        testSourceDirs += testFunctionalSrc.resources.srcDirs
    }
}
