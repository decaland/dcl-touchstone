plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'groovy'
    id 'idea'
}

group = 'com.github.decaland.touchstone'

ext {
    publishToSerpnet = project.hasProperty('serpnet')
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

wrapper {
    gradleVersion = "${project.property('dcl.minversion.gradle')}"
    distributionType = Wrapper.DistributionType.ALL
}

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter:${property('dcl.version.junit5')}")

    implementation "org.springframework.boot:spring-boot-gradle-plugin:${property('dcl.version.spring-boot')}"
    implementation "io.spring.gradle:dependency-management-plugin:${property('dcl.version.spring-dependency-management')}"
    implementation "org.jetbrains.kotlin:kotlin-gradle-plugin:${property('dcl.version.kotlin')}"
    implementation "org.jetbrains.kotlin:kotlin-allopen:${property('dcl.version.kotlin')}"

    implementation "io.freefair.gradle:lombok-plugin:${property('dcl.version.lombok')}"
}

test {
    useJUnitPlatform {
        includeEngines('junit-jupiter')
        excludeEngines('junit-vintage')
    }
}

publishing {
    repositories {
        if (publishToSerpnet) {
            maven {
                url = version.endsWith('SNAPSHOT')
                        ? property('dcl.repository.maven.snapshots')
                        : property('dcl.repository.maven.releases')
                credentials {
                    username = property('dcl.repository.maven.username')
                    password = property('dcl.repository.maven.password')
                }
            }
        } else {
            mavenLocal()
        }
    }
}

def gradlePlugin = project.getExtensions().findByType(GradlePluginDevelopmentExtension)

gradlePlugin.plugins { pluginContainer ->
    pluginContainer.create("decalandLibraryJava") { plugin ->
        plugin.id = 'dcl-lib-java'
        plugin.displayName = 'Decaland library written in Java'
        plugin.description = 'Decaland library written in Java'
        plugin.implementationClass = 'com.github.decaland.touchstone.plugins.builds.DecalandLibraryJavaPlugin'
    }
    pluginContainer.create("decalandLibraryJavaKotlin") { plugin ->
        plugin.id = 'dcl-lib-java-kotlin'
        plugin.displayName = 'Decaland library written in Java or Kotlin or both'
        plugin.description = 'Decaland library written in Java or Kotlin or both'
        plugin.implementationClass = 'com.github.decaland.touchstone.plugins.builds.DecalandLibraryJavaKotlinPlugin'
    }
    pluginContainer.create("decalandSpringBootLibraryJava") { plugin ->
        plugin.id = 'dcl-boot-lib-java'
        plugin.displayName = 'Decaland Spring Boot-based library written in Java'
        plugin.description = 'Decaland Spring Boot-based library written in Java'
        plugin.implementationClass = 'com.github.decaland.touchstone.plugins.builds.DecalandSpringBootLibraryJavaPlugin'
    }
    pluginContainer.create("decalandSpringBootLibraryJavaKotlin") { plugin ->
        plugin.id = 'dcl-boot-lib-java-kotlin'
        plugin.displayName = 'Decaland Spring Boot-based library written in Java or Kotlin or both'
        plugin.description = 'Decaland Spring Boot-based library written in Java or Kotlin or both'
        plugin.implementationClass = 'com.github.decaland.touchstone.plugins.builds.DecalandSpringBootLibraryJavaKotlinPlugin'
    }
    pluginContainer.create("decalandSpringBootApplicationJava") { plugin ->
        plugin.id = 'dcl-boot-app-java'
        plugin.displayName = 'Decaland Spring Boot-based application written in Java'
        plugin.description = 'Decaland Spring Boot-based application written in Java'
        plugin.implementationClass = 'com.github.decaland.touchstone.plugins.builds.DecalandSpringBootApplicationJavaPlugin'
    }
    pluginContainer.create("decalandSpringBootApplicationJavaKotlin") { plugin ->
        plugin.id = 'dcl-boot-app-java-kotlin'
        plugin.displayName = 'Decaland Spring Boot-based application written in Java or Kotlin or both'
        plugin.description = 'Decaland Spring Boot-based application written in Java or Kotlin or both'
        plugin.implementationClass = 'com.github.decaland.touchstone.plugins.builds.DecalandSpringBootApplicationJavaKotlinPlugin'
    }
    pluginContainer.create("decalandEssentialDependencies") { plugin ->
        plugin.id = 'dcl-essential-dependencies'
        plugin.displayName = 'Decaland essential library dependencies'
        plugin.description = 'Decaland essential library dependencies'
        plugin.implementationClass = 'com.github.decaland.touchstone.plugins.dependencies.DecalandEssentialDependenciesPlugin'
    }
}

/*
Set up modules for:
    - unit testing          ('test', built-in)
    - integration testing   ('testIntegration')
    - functional testing    ('testFunctional')
 */

// Create and register source sets
def sourceSets = (SourceSetContainer) project.getProperties().get("sourceSets")
def testIntegrationSrc = sourceSets.create('testIntegration')
def testFunctionalSrc = sourceSets.create('testFunctional')
gradlePlugin.testSourceSets(testIntegrationSrc, testFunctionalSrc)

// Ensure new test configurations extend from existing one
def testImplementationConfiguration = configurations.getByName('testImplementation')
configurations.getByName('testIntegrationImplementation').extendsFrom(testImplementationConfiguration)
configurations.getByName('testFunctionalImplementation').extendsFrom(testImplementationConfiguration)

// Create tasks
def testTask = tasks.named('test')
def testIntegrationTask = tasks.register('testIntegration', Test) {
    group = 'verification'
    testClassesDirs = testIntegrationSrc.output.classesDirs
    classpath = testIntegrationSrc.runtimeClasspath
    it.mustRunAfter(testTask)
}
def testFunctionalTask = tasks.register('testFunctional', Test) {
    group = 'verification'
    testClassesDirs = testFunctionalSrc.output.classesDirs
    classpath = testFunctionalSrc.runtimeClasspath
    it.mustRunAfter(testTask)
}

// Set up appropriate dependencies
tasks.named('check') {
    it.dependsOn(testIntegrationTask, testFunctionalTask)
}

// Configure Intellij IDEA
idea {
    module {
        testSourceDirs += testIntegrationSrc.java.srcDirs
        testSourceDirs += testIntegrationSrc.groovy.srcDirs
        testSourceDirs += testIntegrationSrc.resources.srcDirs
        testSourceDirs += testFunctionalSrc.java.srcDirs
        testSourceDirs += testFunctionalSrc.groovy.srcDirs
        testSourceDirs += testFunctionalSrc.resources.srcDirs
    }
}
